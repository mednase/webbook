<?php

namespace Proxies\__CG__\Webbook\MainBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Subscription extends \Webbook\MainBundle\Entity\Subscription implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'id', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'ip', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'dateFrom', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'dateTo', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'establishmentName', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'establishmentAddress', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'type', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'categories', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'user'];
        }

        return ['__isInitialized__', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'id', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'ip', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'dateFrom', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'dateTo', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'establishmentName', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'establishmentAddress', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'type', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'categories', '' . "\0" . 'Webbook\\MainBundle\\Entity\\Subscription' . "\0" . 'user'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Subscription $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFrom($dateFrom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFrom', [$dateFrom]);

        return parent::setDateFrom($dateFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFrom', []);

        return parent::getDateFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateTo($dateTo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateTo', [$dateTo]);

        return parent::setDateTo($dateTo);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateTo', []);

        return parent::getDateTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setEstablishmentName($establishmentName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEstablishmentName', [$establishmentName]);

        return parent::setEstablishmentName($establishmentName);
    }

    /**
     * {@inheritDoc}
     */
    public function getEstablishmentName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEstablishmentName', []);

        return parent::getEstablishmentName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEstablishmentAddress($establishmentAddress)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEstablishmentAddress', [$establishmentAddress]);

        return parent::setEstablishmentAddress($establishmentAddress);
    }

    /**
     * {@inheritDoc}
     */
    public function getEstablishmentAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEstablishmentAddress', []);

        return parent::getEstablishmentAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function getIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIp', []);

        return parent::getIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setIp($ip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIp', [$ip]);

        return parent::setIp($ip);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', []);

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategories($categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategories', [$categories]);

        return parent::setCategories($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

}
