<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormError;

use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\QueryBuilder;

use Lexik\Bundle\FormFilterBundle\Filter\FilterBuilderExecuterInterface;
use Lexik\Bundle\FormFilterBundle\Filter\Query\QueryInterface;

class {{ form_class }} extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
        {%- for data in fields_data %}

            {% if data.fieldName not in ['id', 'token'] %}->add('{{ data.fieldName }}', '{{ data.filterWidget }}', array(
                    'attr' => array(
                        'form' => 'form_filter'
                    ),
                    'apply_filter' => function (QueryInterface $filterQuery, $field, $values) {
                        if (empty($values['value'])) {
                            return null;
                        }

                        $paramName = sprintf('p_%s', str_replace('.', '_', $field));
                        // expression that represent the condition
                        $expression = $filterQuery->getExpr()->{% if data.filterWidget == 'filter_text' %}like{% else %}eq{% endif %}('e.{{ data.fieldName }}', ':'.$paramName);

                        // expression parameters
                        $parameters = array($paramName => {% if data.filterWidget == 'filter_text' %}'%'.{% endif %}$values['value']{% if data.filterWidget == 'filter_text' %}.'%'{% endif %});
                        // or if you need to define the parameter's type
                        // $parameters = array($paramName => array($values['value'], \PDO::PARAM_STR)); // [ name => [value, type] ]

                        return $filterQuery->createCondition($expression, $parameters);
                    },
                )){% endif %}

        {%- endfor %}

        ;

        $listener = function(FormEvent $event)
        {
            // Is data empty?
            foreach ($event->getData() as $data) {
                if(is_array($data)) {
                    foreach ($data as $subData) {
                        if(!empty($subData)) return;
                    }
                }
                else {
                    if(!empty($data)) return;
                }
            }

            $event->getForm()->addError(new FormError('Filter empty'));
        };
        $builder->addEventListener(FormEvents::POST_BIND, $listener);
    }

    public function getName()
    {
        return '{{ form_filter_type_name }}';
    }
}
