<?php

namespace Webbook\MainBundle\Repository;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{

    public function getAuthorizedUsers($token){
        return $this->createQueryBuilder("b")
            ->select("u")
            ->join("MainBundle:BookBlock","bl","with","bl.book = b.id")
            ->join("MainBundle:Authorization","a","with","a.bookBlock = bl.id")
            ->join("UserBundle:User","u","with","a.administrator= u.id")
            ->where("b.token = :token")
            ->setParameter("token",$token)
            ->getQuery()->getResult();
    }

    public function getUserBooksFromAuthorization($user){
        return $this->createQueryBuilder("b")
            ->select("b")
            ->join("MainBundle:BookBlock","bl","with","bl.book = b.id")
            ->join("MainBundle:Authorization","a","with","a.bookBlock = bl.id")
            ->join("UserBundle:User","u","with","a.user= u.id")
            ->where("u.id = :administrator")
            ->setParameter("administrator",$user)
            ->distinct()
            ->getQuery()->getResult();
    }

    public function findByAuthor($user){

        return $this->createQueryBuilder('b')
            ->select('b')
            ->join('UserBundle:User','u','with','u.id=b.mainAuthors')
            ->where('u.id = :administrator')
            ->setParameter('administrator',$user)
            ->getQuery()->getResult();
    }

    public function findByTitle($title,$limit=null){

        $query= $this->createQueryBuilder('b')
            ->select('b')
            ->where('b.title like :title')
            ->setParameter('title','%'.$title.'%');
            if($limit)
                $query->setMaxResults($limit);
            return $query->getQuery()->getResult();
    }
    public function findByAuthorFullName($fullname,$limit=null){

         $query=$this->createQueryBuilder('b')
            ->select('b')
            ->join('b.mainAuthors','u')
             ->join('u.profile','p')
            ->where('p.fullName like :fullname')
            ->setParameter('fullname','%'.$fullname.'%');
            if($limit)
                $query->setMaxResults($limit);

           return $query->getQuery()->getResult();

    }

    public function findByDescription($description,$limit=null){

         $query=$this->createQueryBuilder('b')
            ->select('b')
            ->where('b.description like :description')
            ->setParameter('description','%'.$description.'%');
            if($limit)
                $query->setMaxResults($limit);
           return $query->getQuery()->getResult();
    }

    public function getBooksByCategory($category,$page=1,$range=8){


        return $this->createQueryBuilder("b")
                ->where('b.category = :category')
                ->andWhere('b.published = true')
                ->orderBy('b.publishDate','DESC')
                ->setParameter('category',$category)
                ->setMaxResults($range)
                ->setFirstResult(($page-1)*$range)
                ->getQuery()->getResult();
    }

    public function bestBooks(){

        return $this->createQueryBuilder('b')
            ->select(' b ,COUNT(r.rate) AS HIDDEN score ')
            ->leftJoin('b.reviews','r')
            ->where('r.rate >= 4')
            ->groupBy('b.id')
            ->orderBy('score','DESC')
            ->getQuery()->getResult();

    }
    public function bestSellingBooks(){
        return $this->createQueryBuilder('b')
            ->select(' b ,COUNT(b.id) AS HIDDEN counter ')
            ->from('MainBundle:Purchase','p')
            ->join('p.books','book')
            ->where('b.id = book.id')
            ->groupBy('b.id')
            ->orderBy('counter','DESC')
            ->getQuery()->getResult();
    }
}
